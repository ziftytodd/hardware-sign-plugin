{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface GenerateKeyResult {\n  /** “created” if a new key was generated, “already_exists” if it was already present */\n  status: 'created' | 'already_exists';\n}\n\nexport interface SignOptions {\n  /** Base64‑encoded SHA‑256 hash of the JSON payload you want to sign */\n  payload: string;\n}\n\nexport interface SignResult {\n  /** Base64‑encoded RSA‑SHA256 signature over the provided payload */\n  signature: string;\n}\n\nexport interface GetPublicKeyResult {\n  /** Base64‑encoded X.509 certificate (DER) of the public key */\n  publicKey: string;\n}\n\nexport interface HardwareSignPlugin {\n  /**\n   * Create (or verify existence of) a hardware‑backed RSA keypair under a fixed alias.\n   * Returns { status: \"created\" } or { status: \"already_exists\" }.\n   */\n  generateKey(): Promise<GenerateKeyResult>;\n\n  /**\n   * Sign the provided Base64‑encoded SHA‑256 hash using the private key from KeyStore.\n   * Returns { signature: \"<Base64‑of‑RSA‑SHA256‑signature>\" }.\n   */\n  sign(options: SignOptions): Promise<SignResult>;\n\n  /**\n   * Retrieve the public X.509 certificate (DER, Base64‑encoded) so your server can verify.\n   * Returns { publicKey: \"<Base64‑DER‑X509‑cert>\" }.\n   */\n  getPublicKey(): Promise<GetPublicKeyResult>;\n}\n"]}